def label = "sumapp-${UUID.randomUUID().toString()}"
/*
def notifyStarted() {
    slackSend (color: '#FFFF00', message: "STARTED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
}
def notifySuccessful() {
    slackSend (color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
}
def notifyFailed() {
  slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
}
*/
podTemplate(label: label, 
	containers: [
	  containerTemplate(name: 'maven', image: 'maven:3.3.9-jdk-8-alpine', ttyEnabled: true, command: 'cat'),
	  containerTemplate(name: 'docker', image: 'docker:stable', ttyEnabled: true, command: 'cat'),
	  containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:v1.8.0', command: 'cat', ttyEnabled: true)
	],
	volumes: [hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock')]
	) {
	
	node(label) {
	try {
		
	  hubotSend message: "*Release Started*. \n Releasing Test Project. :sunny: \n<!here> <!channel> <@nrayapati> ", tokens: "BUILD_NUMBER,BUILD_ID", status: 'STARTED'
	  stage('Get Source') {
		git "https://github.com/minchocosong/vue-test.git"
	  }

	  def props = readProperties  file:'deployment/pipeline.properties'
	  //def tag = VersionNumber (versionNumberString: '${BUILD_DATE_FORMATTED, "yyyyMMdd"}-sumapp-${BUILDS_TODAY}')
	  def tag = props['version']
	  def dockerRegistry = props['dockerRegistry']
	  def image = props['image']
	  def deployment = props['deployment']
	  def service = props['service']
	  def selector = props['selector']
	  def namespace = props['namespace']

	  
		/*
	  stage('Inspection Code') {
		container('maven') {
			sh "mvn sonar:sonar \
				  -Dsonar.host.url= \
				  -Dsonar.login="
		}
	  }
	  */
	  stage('Build Docker image') {
		container('docker') {
		  docker.withRegistry("${dockerRegistry}", 'registry-credentials') {
			sh "docker build -t ${image}:${tag} ."
			sh "docker push ${image}:${tag}"
			sh "docker tag ${image}:${tag} ${image}:latest"
			sh "docker push ${image}:latest"
		  }
		}
	  }
	  //stage('Image Vulnerability Scanning') {
		//  container('docker'){
		  //aquaMicroscanner imageName: 'mycluster.icp:8500/devops/sumapp:latest', notCompliesCmd: '', onDisallowed: 'ignore', outputFormat: 'html'
		  //}
	  //}
	  stage( 'Clean Up Existing Deployments' ) {
		container('kubectl') {
		  withCredentials([[$class: 'UsernamePasswordMultiBinding',
							  credentialsId: 'registry-credentials',
							  usernameVariable: 'DOCKER_HUB_USER',
							  passwordVariable: 'DOCKER_HUB_PASSWORD']]) {
			  
			  sh "kubectl delete deployments -n ${namespace} --selector=app=${selector}"
		  }
		}
	  }
		
		stage( "Approver" ){
//		    input "배포를 승인하시겠습니까?"
		hubotApprove message: 'Promote to Production?'
		}
	  stage( 'Deploy to Cluster' ) {
		container('kubectl') {
		  withCredentials([[$class: 'UsernamePasswordMultiBinding',
							  credentialsId: 'registry-credentials',
							  usernameVariable: 'DOCKER_HUB_USER',
							  passwordVariable: 'DOCKER_HUB_PASSWORD']]) {
			  
			  sh "kubectl apply -n ${namespace} -f ${deployment}"
			  sh "sleep 5"
			  sh "kubectl apply -n ${namespace} -f ${service}"
		  }
		}
	  }
		
//	  notifySuccessful()
	  hubotSend message: "*Release Completed*. \n Releasing Test Project.", tokens: "BUILD_NUMBER,BUILD_ID", status: 'SUCCESS'
	  } catch(e) {
	  hubotSend message: "*Release Failed*."
        currentBuild.result = "FAILED"
//        notifyFailed()
    }

  }
}